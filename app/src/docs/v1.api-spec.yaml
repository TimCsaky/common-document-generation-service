---
openapi: 3.0.2
info:
  version: 1.0.0
  title: Common Document Generation Service API
  description: CDOGS
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
servers:
  - url: /api/v1
    description: This Server
security:
  - OpenID: []
paths:
  /health:
    get:
      summary: Returns health checks of external service dependencies.
      description: >-
        This endpoint returns the state and connectivity of any external
        services CDOGS depends on.
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Returns the healthiness of the service dependencies
          content:
            application/json:
              schema:
                type: object
                required:
                  - dependencies
                properties:
                  dependencies:
                    type: array
                    description: A list of Health states
                    items:
                      $ref: '#/components/schemas/Health'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docGen:
    post:
      summary: Generate a document
      description: >-
        This endpoint accepts a document template and a set (or multiple sets)
        of subsitution variables and merges them into the document.
      operationId: postDocGen
      tags:
        - DocGen
      security:
        - OpenID:
          - GENERATOR
      requestBody:
        description: Fields required to generate a document
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocGenObject'
      responses:
        '201':
          description: Returns the supplied document with variables merged in
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: >-
        https://sso.pathfinder.gov.bc.ca/auth/realms/jbd6rnxw/.well-known/openid-configuration
  schemas:
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: 'https://httpstatuses.com/400'
    ContextObject:
      type: object
      description: >-
        A freeform JSON object of key-value pairs.  All keys must be
        alphanumeric or underscore.
      example:
        something:
          greeting: Hello
          target: World
        someone: user
    DocGenObject:
      type: object
      properties:
        contexts:
          type: array
          description: An array of Context objects
          items:
            $ref: '#/components/schemas/ContextObject'
        template:
          allOf:
            - $ref: '#/components/schemas/TemplateObject'
            - type: object
              description: An object containing the document template to merge into
    Error:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: 'https://httpstatuses.com/500'
    Health:
      type: object
      required:
        - name
        - healthy
        - info
      properties:
        name:
          type: string
          description: The name of the dependency
          example: windward
        healthy:
          type: boolean
          description: Is the dependency reachable/alive
        info:
          type: string
          description: Any extra information, generally useful when dependency is unreachable
          example: 'Windward connected successfully.'
    NotFound:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: 'https://httpstatuses.com/404'
    Problem:
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          description: 'What type of problem, link to explanation of problem'
        title:
          type: string
          description: 'Title of problem, generally the Http Status Code description'
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: Short description of why this problem was raised.
    TemplateObject:
      type: object
      properties:
        content:
          type: string
          description: 'String, Buffer or a Stream contents for the attachment'
          example: PGI+SGVsbG8gV29ybGRcITwvYj4=
        contentEncodingType:
          type: string
          description: >-
            If set and content is string, then encodes the content to a Buffer
            using the specified encoding. Example values: 'base64', 'hex',
            'binary' etc. Useful if you want to use binary attachments in a JSON
            formatted email object.
          enum:
            - base64
            - binary
            - hex
          example: base64
        filename:
          type: string
          description: >-
            Filename to be used as the resultant merged document. Use of
            unicode is allowed.
          example: filename.docx
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: 'https://httpstatuses.com/422'
  responses:
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Lack required role to perform action
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    UnauthorizedError:
      description: Access token is missing or invalid
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
